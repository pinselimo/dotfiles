:set +t
:set +m

:{
promptly :: [String] -> Int -> IO String
promptly modules line = let
         e = "\ESC[m "
         p = "\ESC[1;35mλ>" <> e
         ln = c 8 <> show line <> e
         c n = "\ESC[1;38;5;" <> show n <> "m"
  in return . ('\n':) . (ln<>)
   $ case reverse modules of
       h:_:_ -> c 183 <> h <> e <> p
       _     -> p -- hide Prelude
:}

:{
printer :: Show a => a -> IO ()
printer = putStrLn . trans . show
        where trans s = "\ESC[1;38;5;8m|\ESC[m  \ESC[1;35m…\ESC[m "
                     <> s
:}

:set prompt-function promptly
:set -interactive-print printer

:set prompt-cont "\ESC[1;35m| \ESC[m"

